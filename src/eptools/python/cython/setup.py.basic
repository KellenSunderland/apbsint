from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext
import numpy

setup(
cmdclass = {'build_ext': build_ext},
ext_modules = [
    Extension(
        'eptools_ext',
        sources = [
            'eptools_ext.pyx',
            'base/lhotse/global.cc',
            'base/lhotse/StandardException.cc',
            'base/lhotse/FileUtils.cc',
            'base/lhotse/IntVal.cc',
            'base/lhotse/Interval.cc',
            'base/lhotse/Range.cc',
            'base/src/eptools/potentials/DefaultPotManager.cc',
            'base/src/eptools/potentials/EPPotentialFactory.cc',
            'base/src/eptools/potentials/EPPotentialNamedFactory.cc',
            'base/src/eptools/potentials/PotManagerFactory.cc',
            'base/src/eptools/potentials/SpecfunServices.cc',
            'base/src/eptools/FactorizedEPRepresentation.cc',
            'base/src/eptools/FactorizedEPDriver.cc',
            'base/src/eptools/wrap/eptools_helper_basic.cc',
            'base/src/eptools/wrap/eptools_helper.cc',
            'base/src/eptools/wrap/eptwrap_choldnrk1.cc',
            'base/src/eptools/wrap/eptwrap_choluprk1.cc',
            'base/src/eptools/wrap/eptwrap_epupdate_parallel.cc',
            'base/src/eptools/wrap/eptwrap_epupdate_single.cc',
            'base/src/eptools/wrap/eptwrap_fact_compmarginals.cc',
            'base/src/eptools/wrap/eptwrap_fact_compmaxpi.cc',
            'base/src/eptools/wrap/eptwrap_fact_sequpdates.cc',
            'base/src/eptools/wrap/eptwrap_getpotid.cc',
            'base/src/eptools/wrap/eptwrap_getpotname.cc',
            'base/src/eptools/wrap/eptwrap_potmanager_isvalid.cc'
        ],
        include_dirs = [numpy.get_include(), '/home/seeger/lhotse'],
        define_macros = [('HAVE_NO_BLAS', None), ('HAVE_FORTRAN', None)],
        libraries = ['m'],
        library_dirs = ['/usr/lib64'],
        language = 'c++'
    ),
    Extension(
        'apbtest_ext',
        sources = [
            'apbtest_ext.pyx',
            'base/lhotse/global.cc',
            'base/lhotse/StandardException.cc',
            'base/lhotse/FileUtils.cc',
            'base/lhotse/IntVal.cc',
            'base/lhotse/Interval.cc',
            'base/lhotse/Range.cc',
            'base/src/eptools/potentials/SpecfunServices.cc'
        ],
        include_dirs = [numpy.get_include(), '/home/seeger/lhotse'],
        define_macros = [('HAVE_NO_BLAS', None), ('HAVE_FORTRAN', None)],
        libraries = ['m'],
        library_dirs = ['/usr/lib64'],
        language = 'c++'
    )
]
)
